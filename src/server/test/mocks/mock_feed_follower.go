// Code generated by MockGen. DO NOT EDIT.
// Source: rss_parrot/logic (interfaces: IFeedFollower)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination ../test/mocks/mock_feed_follower.go -package mocks rss_parrot/logic IFeedFollower
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	dal "rss_parrot/dal"
	logic "rss_parrot/logic"

	gomock "go.uber.org/mock/gomock"
)

// MockIFeedFollower is a mock of IFeedFollower interface.
type MockIFeedFollower struct {
	ctrl     *gomock.Controller
	recorder *MockIFeedFollowerMockRecorder
}

// MockIFeedFollowerMockRecorder is the mock recorder for MockIFeedFollower.
type MockIFeedFollowerMockRecorder struct {
	mock *MockIFeedFollower
}

// NewMockIFeedFollower creates a new mock instance.
func NewMockIFeedFollower(ctrl *gomock.Controller) *MockIFeedFollower {
	mock := &MockIFeedFollower{ctrl: ctrl}
	mock.recorder = &MockIFeedFollowerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFeedFollower) EXPECT() *MockIFeedFollowerMockRecorder {
	return m.recorder
}

// GetAccountForFeed mocks base method.
func (m *MockIFeedFollower) GetAccountForFeed(arg0 string) (*dal.Account, logic.FeedStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountForFeed", arg0)
	ret0, _ := ret[0].(*dal.Account)
	ret1, _ := ret[1].(logic.FeedStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAccountForFeed indicates an expected call of GetAccountForFeed.
func (mr *MockIFeedFollowerMockRecorder) GetAccountForFeed(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountForFeed", reflect.TypeOf((*MockIFeedFollower)(nil).GetAccountForFeed), arg0)
}
