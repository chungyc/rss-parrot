// Code generated by MockGen. DO NOT EDIT.
// Source: rss_parrot/logic (interfaces: IUserDirectory)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination ../test/mocks/mock_user_director.go -package mocks rss_parrot/logic IUserDirectory
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	dto "rss_parrot/dto"

	gomock "go.uber.org/mock/gomock"
)

// MockIUserDirectory is a mock of IUserDirectory interface.
type MockIUserDirectory struct {
	ctrl     *gomock.Controller
	recorder *MockIUserDirectoryMockRecorder
}

// MockIUserDirectoryMockRecorder is the mock recorder for MockIUserDirectory.
type MockIUserDirectoryMockRecorder struct {
	mock *MockIUserDirectory
}

// NewMockIUserDirectory creates a new mock instance.
func NewMockIUserDirectory(ctrl *gomock.Controller) *MockIUserDirectory {
	mock := &MockIUserDirectory{ctrl: ctrl}
	mock.recorder = &MockIUserDirectoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserDirectory) EXPECT() *MockIUserDirectoryMockRecorder {
	return m.recorder
}

// AcceptFollower mocks base method.
func (m *MockIUserDirectory) AcceptFollower(arg0, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptFollower", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptFollower indicates an expected call of AcceptFollower.
func (mr *MockIUserDirectoryMockRecorder) AcceptFollower(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptFollower", reflect.TypeOf((*MockIUserDirectory)(nil).AcceptFollower), arg0, arg1, arg2, arg3)
}

// GetFollowersSummary mocks base method.
func (m *MockIUserDirectory) GetFollowersSummary(arg0 string) *dto.OrderedListSummary {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowersSummary", arg0)
	ret0, _ := ret[0].(*dto.OrderedListSummary)
	return ret0
}

// GetFollowersSummary indicates an expected call of GetFollowersSummary.
func (mr *MockIUserDirectoryMockRecorder) GetFollowersSummary(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowersSummary", reflect.TypeOf((*MockIUserDirectory)(nil).GetFollowersSummary), arg0)
}

// GetFollowingSummary mocks base method.
func (m *MockIUserDirectory) GetFollowingSummary(arg0 string) *dto.OrderedListSummary {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowingSummary", arg0)
	ret0, _ := ret[0].(*dto.OrderedListSummary)
	return ret0
}

// GetFollowingSummary indicates an expected call of GetFollowingSummary.
func (mr *MockIUserDirectoryMockRecorder) GetFollowingSummary(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowingSummary", reflect.TypeOf((*MockIUserDirectory)(nil).GetFollowingSummary), arg0)
}

// GetOutboxSummary mocks base method.
func (m *MockIUserDirectory) GetOutboxSummary(arg0 string) *dto.OrderedListSummary {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutboxSummary", arg0)
	ret0, _ := ret[0].(*dto.OrderedListSummary)
	return ret0
}

// GetOutboxSummary indicates an expected call of GetOutboxSummary.
func (mr *MockIUserDirectoryMockRecorder) GetOutboxSummary(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutboxSummary", reflect.TypeOf((*MockIUserDirectory)(nil).GetOutboxSummary), arg0)
}

// GetUserInfo mocks base method.
func (m *MockIUserDirectory) GetUserInfo(arg0 string) *dto.UserInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", arg0)
	ret0, _ := ret[0].(*dto.UserInfo)
	return ret0
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockIUserDirectoryMockRecorder) GetUserInfo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockIUserDirectory)(nil).GetUserInfo), arg0)
}

// GetUserStatus mocks base method.
func (m *MockIUserDirectory) GetUserStatus(arg0, arg1 string) (*dto.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserStatus", arg0, arg1)
	ret0, _ := ret[0].(*dto.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserStatus indicates an expected call of GetUserStatus.
func (mr *MockIUserDirectoryMockRecorder) GetUserStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserStatus", reflect.TypeOf((*MockIUserDirectory)(nil).GetUserStatus), arg0, arg1)
}

// GetWebfinger mocks base method.
func (m *MockIUserDirectory) GetWebfinger(arg0 string) *dto.WebfingerResp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebfinger", arg0)
	ret0, _ := ret[0].(*dto.WebfingerResp)
	return ret0
}

// GetWebfinger indicates an expected call of GetWebfinger.
func (mr *MockIUserDirectoryMockRecorder) GetWebfinger(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebfinger", reflect.TypeOf((*MockIUserDirectory)(nil).GetWebfinger), arg0)
}
