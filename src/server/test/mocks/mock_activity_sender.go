// Code generated by MockGen. DO NOT EDIT.
// Source: rss_parrot/logic (interfaces: IActivitySender)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination ../test/mocks/mock_activity_sender.go -package mocks rss_parrot/logic IActivitySender
//

// Package mocks is a generated GoMock package.
package mocks

import (
	rsa "crypto/rsa"
	reflect "reflect"
	dto "rss_parrot/dto"

	gomock "go.uber.org/mock/gomock"
)

// MockIActivitySender is a mock of IActivitySender interface.
type MockIActivitySender struct {
	ctrl     *gomock.Controller
	recorder *MockIActivitySenderMockRecorder
}

// MockIActivitySenderMockRecorder is the mock recorder for MockIActivitySender.
type MockIActivitySenderMockRecorder struct {
	mock *MockIActivitySender
}

// NewMockIActivitySender creates a new mock instance.
func NewMockIActivitySender(ctrl *gomock.Controller) *MockIActivitySender {
	mock := &MockIActivitySender{ctrl: ctrl}
	mock.recorder = &MockIActivitySenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIActivitySender) EXPECT() *MockIActivitySenderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockIActivitySender) Send(arg0 *rsa.PrivateKey, arg1, arg2 string, arg3 *dto.ActivityOut) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockIActivitySenderMockRecorder) Send(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockIActivitySender)(nil).Send), arg0, arg1, arg2, arg3)
}
