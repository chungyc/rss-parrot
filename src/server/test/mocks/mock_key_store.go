// Code generated by MockGen. DO NOT EDIT.
// Source: rss_parrot/logic (interfaces: IKeyStore)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination ../test/mocks/mock_key_store.go -package mocks rss_parrot/logic IKeyStore
//

// Package mocks is a generated GoMock package.
package mocks

import (
	rsa "crypto/rsa"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIKeyStore is a mock of IKeyStore interface.
type MockIKeyStore struct {
	ctrl     *gomock.Controller
	recorder *MockIKeyStoreMockRecorder
}

// MockIKeyStoreMockRecorder is the mock recorder for MockIKeyStore.
type MockIKeyStoreMockRecorder struct {
	mock *MockIKeyStore
}

// NewMockIKeyStore creates a new mock instance.
func NewMockIKeyStore(ctrl *gomock.Controller) *MockIKeyStore {
	mock := &MockIKeyStore{ctrl: ctrl}
	mock.recorder = &MockIKeyStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIKeyStore) EXPECT() *MockIKeyStoreMockRecorder {
	return m.recorder
}

// GetPrivKey mocks base method.
func (m *MockIKeyStore) GetPrivKey(arg0 string) (*rsa.PrivateKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivKey", arg0)
	ret0, _ := ret[0].(*rsa.PrivateKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivKey indicates an expected call of GetPrivKey.
func (mr *MockIKeyStoreMockRecorder) GetPrivKey(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivKey", reflect.TypeOf((*MockIKeyStore)(nil).GetPrivKey), arg0)
}

// MakeKeyPair mocks base method.
func (m *MockIKeyStore) MakeKeyPair() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeKeyPair")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MakeKeyPair indicates an expected call of MakeKeyPair.
func (mr *MockIKeyStoreMockRecorder) MakeKeyPair() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeKeyPair", reflect.TypeOf((*MockIKeyStore)(nil).MakeKeyPair))
}
