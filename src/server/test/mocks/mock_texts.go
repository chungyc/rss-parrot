// Code generated by MockGen. DO NOT EDIT.
// Source: rss_parrot/texts (interfaces: ITexts)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination ../test/mocks/mock_texts.go -package mocks rss_parrot/texts ITexts
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockITexts is a mock of ITexts interface.
type MockITexts struct {
	ctrl     *gomock.Controller
	recorder *MockITextsMockRecorder
}

// MockITextsMockRecorder is the mock recorder for MockITexts.
type MockITextsMockRecorder struct {
	mock *MockITexts
}

// NewMockITexts creates a new mock instance.
func NewMockITexts(ctrl *gomock.Controller) *MockITexts {
	mock := &MockITexts{ctrl: ctrl}
	mock.recorder = &MockITextsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITexts) EXPECT() *MockITextsMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockITexts) Get(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockITextsMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockITexts)(nil).Get), arg0)
}

// WithVals mocks base method.
func (m *MockITexts) WithVals(arg0 string, arg1 map[string]string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithVals", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// WithVals indicates an expected call of WithVals.
func (mr *MockITextsMockRecorder) WithVals(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithVals", reflect.TypeOf((*MockITexts)(nil).WithVals), arg0, arg1)
}
