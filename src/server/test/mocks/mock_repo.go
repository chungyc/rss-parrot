// Code generated by MockGen. DO NOT EDIT.
// Source: rss_parrot/dal (interfaces: IRepo)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination ../test/mocks/mock_repo.go -package mocks rss_parrot/dal IRepo
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	dal "rss_parrot/dal"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockIRepo is a mock of IRepo interface.
type MockIRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIRepoMockRecorder
}

// MockIRepoMockRecorder is the mock recorder for MockIRepo.
type MockIRepoMockRecorder struct {
	mock *MockIRepo
}

// NewMockIRepo creates a new mock instance.
func NewMockIRepo(ctrl *gomock.Controller) *MockIRepo {
	mock := &MockIRepo{ctrl: ctrl}
	mock.recorder = &MockIRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepo) EXPECT() *MockIRepoMockRecorder {
	return m.recorder
}

// AddAccountIfNotExist mocks base method.
func (m *MockIRepo) AddAccountIfNotExist(arg0 *dal.Account, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccountIfNotExist", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAccountIfNotExist indicates an expected call of AddAccountIfNotExist.
func (mr *MockIRepoMockRecorder) AddAccountIfNotExist(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccountIfNotExist", reflect.TypeOf((*MockIRepo)(nil).AddAccountIfNotExist), arg0, arg1)
}

// AddFeedPostIfNew mocks base method.
func (m *MockIRepo) AddFeedPostIfNew(arg0 int, arg1 *dal.FeedPost) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFeedPostIfNew", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFeedPostIfNew indicates an expected call of AddFeedPostIfNew.
func (mr *MockIRepoMockRecorder) AddFeedPostIfNew(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFeedPostIfNew", reflect.TypeOf((*MockIRepo)(nil).AddFeedPostIfNew), arg0, arg1)
}

// AddFollower mocks base method.
func (m *MockIRepo) AddFollower(arg0 string, arg1 *dal.FollowerInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFollower", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFollower indicates an expected call of AddFollower.
func (mr *MockIRepoMockRecorder) AddFollower(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFollower", reflect.TypeOf((*MockIRepo)(nil).AddFollower), arg0, arg1)
}

// AddToot mocks base method.
func (m *MockIRepo) AddToot(arg0 int, arg1 *dal.Toot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToot indicates an expected call of AddToot.
func (mr *MockIRepoMockRecorder) AddToot(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToot", reflect.TypeOf((*MockIRepo)(nil).AddToot), arg0, arg1)
}

// AddTootQueueItem mocks base method.
func (m *MockIRepo) AddTootQueueItem(arg0 *dal.TootQueueItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTootQueueItem", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTootQueueItem indicates an expected call of AddTootQueueItem.
func (mr *MockIRepoMockRecorder) AddTootQueueItem(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTootQueueItem", reflect.TypeOf((*MockIRepo)(nil).AddTootQueueItem), arg0)
}

// BruteDeleteAccount mocks base method.
func (m *MockIRepo) BruteDeleteAccount(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BruteDeleteAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BruteDeleteAccount indicates an expected call of BruteDeleteAccount.
func (mr *MockIRepoMockRecorder) BruteDeleteAccount(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BruteDeleteAccount", reflect.TypeOf((*MockIRepo)(nil).BruteDeleteAccount), arg0)
}

// DeleteHandledActivities mocks base method.
func (m *MockIRepo) DeleteHandledActivities(arg0 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHandledActivities", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHandledActivities indicates an expected call of DeleteHandledActivities.
func (mr *MockIRepoMockRecorder) DeleteHandledActivities(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHandledActivities", reflect.TypeOf((*MockIRepo)(nil).DeleteHandledActivities), arg0)
}

// DeleteTootQueueItem mocks base method.
func (m *MockIRepo) DeleteTootQueueItem(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTootQueueItem", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTootQueueItem indicates an expected call of DeleteTootQueueItem.
func (mr *MockIRepoMockRecorder) DeleteTootQueueItem(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTootQueueItem", reflect.TypeOf((*MockIRepo)(nil).DeleteTootQueueItem), arg0)
}

// DoesAccountExist mocks base method.
func (m *MockIRepo) DoesAccountExist(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoesAccountExist", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoesAccountExist indicates an expected call of DoesAccountExist.
func (mr *MockIRepoMockRecorder) DoesAccountExist(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesAccountExist", reflect.TypeOf((*MockIRepo)(nil).DoesAccountExist), arg0)
}

// GetAccount mocks base method.
func (m *MockIRepo) GetAccount(arg0 string) (*dal.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0)
	ret0, _ := ret[0].(*dal.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockIRepoMockRecorder) GetAccount(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockIRepo)(nil).GetAccount), arg0)
}

// GetAccountToCheck mocks base method.
func (m *MockIRepo) GetAccountToCheck(arg0 time.Time) (*dal.Account, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountToCheck", arg0)
	ret0, _ := ret[0].(*dal.Account)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAccountToCheck indicates an expected call of GetAccountToCheck.
func (mr *MockIRepoMockRecorder) GetAccountToCheck(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountToCheck", reflect.TypeOf((*MockIRepo)(nil).GetAccountToCheck), arg0)
}

// GetAccountsPage mocks base method.
func (m *MockIRepo) GetAccountsPage(arg0, arg1 int) ([]*dal.Account, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsPage", arg0, arg1)
	ret0, _ := ret[0].([]*dal.Account)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAccountsPage indicates an expected call of GetAccountsPage.
func (mr *MockIRepoMockRecorder) GetAccountsPage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsPage", reflect.TypeOf((*MockIRepo)(nil).GetAccountsPage), arg0, arg1)
}

// GetFeedFollowerCount mocks base method.
func (m *MockIRepo) GetFeedFollowerCount() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedFollowerCount")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedFollowerCount indicates an expected call of GetFeedFollowerCount.
func (mr *MockIRepoMockRecorder) GetFeedFollowerCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedFollowerCount", reflect.TypeOf((*MockIRepo)(nil).GetFeedFollowerCount))
}

// GetFeedLastUpdated mocks base method.
func (m *MockIRepo) GetFeedLastUpdated(arg0 int) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedLastUpdated", arg0)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedLastUpdated indicates an expected call of GetFeedLastUpdated.
func (mr *MockIRepoMockRecorder) GetFeedLastUpdated(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedLastUpdated", reflect.TypeOf((*MockIRepo)(nil).GetFeedLastUpdated), arg0)
}

// GetFollowerCount mocks base method.
func (m *MockIRepo) GetFollowerCount(arg0 string, arg1 bool) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowerCount", arg0, arg1)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowerCount indicates an expected call of GetFollowerCount.
func (mr *MockIRepoMockRecorder) GetFollowerCount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowerCount", reflect.TypeOf((*MockIRepo)(nil).GetFollowerCount), arg0, arg1)
}

// GetFollowersById mocks base method.
func (m *MockIRepo) GetFollowersById(arg0 int, arg1 bool) ([]*dal.FollowerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowersById", arg0, arg1)
	ret0, _ := ret[0].([]*dal.FollowerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowersById indicates an expected call of GetFollowersById.
func (mr *MockIRepoMockRecorder) GetFollowersById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowersById", reflect.TypeOf((*MockIRepo)(nil).GetFollowersById), arg0, arg1)
}

// GetFollowersByUser mocks base method.
func (m *MockIRepo) GetFollowersByUser(arg0 string, arg1 bool) ([]*dal.FollowerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowersByUser", arg0, arg1)
	ret0, _ := ret[0].([]*dal.FollowerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowersByUser indicates an expected call of GetFollowersByUser.
func (mr *MockIRepoMockRecorder) GetFollowersByUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowersByUser", reflect.TypeOf((*MockIRepo)(nil).GetFollowersByUser), arg0, arg1)
}

// GetNextId mocks base method.
func (m *MockIRepo) GetNextId() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextId")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNextId indicates an expected call of GetNextId.
func (mr *MockIRepoMockRecorder) GetNextId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextId", reflect.TypeOf((*MockIRepo)(nil).GetNextId))
}

// GetPostCount mocks base method.
func (m *MockIRepo) GetPostCount(arg0 string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostCount", arg0)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostCount indicates an expected call of GetPostCount.
func (mr *MockIRepoMockRecorder) GetPostCount(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostCount", reflect.TypeOf((*MockIRepo)(nil).GetPostCount), arg0)
}

// GetPostsExtract mocks base method.
func (m *MockIRepo) GetPostsExtract(arg0 int) ([]*dal.FeedPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsExtract", arg0)
	ret0, _ := ret[0].([]*dal.FeedPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsExtract indicates an expected call of GetPostsExtract.
func (mr *MockIRepoMockRecorder) GetPostsExtract(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsExtract", reflect.TypeOf((*MockIRepo)(nil).GetPostsExtract), arg0)
}

// GetPostsPage mocks base method.
func (m *MockIRepo) GetPostsPage(arg0, arg1, arg2 int) ([]*dal.FeedPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsPage", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*dal.FeedPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsPage indicates an expected call of GetPostsPage.
func (mr *MockIRepoMockRecorder) GetPostsPage(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsPage", reflect.TypeOf((*MockIRepo)(nil).GetPostsPage), arg0, arg1, arg2)
}

// GetPrivKey mocks base method.
func (m *MockIRepo) GetPrivKey(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivKey", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivKey indicates an expected call of GetPrivKey.
func (mr *MockIRepoMockRecorder) GetPrivKey(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivKey", reflect.TypeOf((*MockIRepo)(nil).GetPrivKey), arg0)
}

// GetToot mocks base method.
func (m *MockIRepo) GetToot(arg0 string) (*dal.Toot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToot", arg0)
	ret0, _ := ret[0].(*dal.Toot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToot indicates an expected call of GetToot.
func (mr *MockIRepoMockRecorder) GetToot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToot", reflect.TypeOf((*MockIRepo)(nil).GetToot), arg0)
}

// GetTootQueueItems mocks base method.
func (m *MockIRepo) GetTootQueueItems(arg0, arg1 int) ([]*dal.TootQueueItem, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTootQueueItems", arg0, arg1)
	ret0, _ := ret[0].([]*dal.TootQueueItem)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTootQueueItems indicates an expected call of GetTootQueueItems.
func (mr *MockIRepoMockRecorder) GetTootQueueItems(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTootQueueItems", reflect.TypeOf((*MockIRepo)(nil).GetTootQueueItems), arg0, arg1)
}

// InitUpdateDb mocks base method.
func (m *MockIRepo) InitUpdateDb() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitUpdateDb")
}

// InitUpdateDb indicates an expected call of InitUpdateDb.
func (mr *MockIRepoMockRecorder) InitUpdateDb() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitUpdateDb", reflect.TypeOf((*MockIRepo)(nil).InitUpdateDb))
}

// MarkActivityHandled mocks base method.
func (m *MockIRepo) MarkActivityHandled(arg0 string, arg1 time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkActivityHandled", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkActivityHandled indicates an expected call of MarkActivityHandled.
func (mr *MockIRepoMockRecorder) MarkActivityHandled(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkActivityHandled", reflect.TypeOf((*MockIRepo)(nil).MarkActivityHandled), arg0, arg1)
}

// PurgePostsAndToots mocks base method.
func (m *MockIRepo) PurgePostsAndToots(arg0 int, arg1 []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurgePostsAndToots", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PurgePostsAndToots indicates an expected call of PurgePostsAndToots.
func (mr *MockIRepoMockRecorder) PurgePostsAndToots(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgePostsAndToots", reflect.TypeOf((*MockIRepo)(nil).PurgePostsAndToots), arg0, arg1)
}

// RemoveFollower mocks base method.
func (m *MockIRepo) RemoveFollower(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFollower", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFollower indicates an expected call of RemoveFollower.
func (mr *MockIRepoMockRecorder) RemoveFollower(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFollower", reflect.TypeOf((*MockIRepo)(nil).RemoveFollower), arg0, arg1)
}

// SetFollowerApproveStatus mocks base method.
func (m *MockIRepo) SetFollowerApproveStatus(arg0, arg1 string, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFollowerApproveStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFollowerApproveStatus indicates an expected call of SetFollowerApproveStatus.
func (mr *MockIRepoMockRecorder) SetFollowerApproveStatus(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFollowerApproveStatus", reflect.TypeOf((*MockIRepo)(nil).SetFollowerApproveStatus), arg0, arg1, arg2)
}

// UpdateAccountFeedTimes mocks base method.
func (m *MockIRepo) UpdateAccountFeedTimes(arg0 int, arg1, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountFeedTimes", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccountFeedTimes indicates an expected call of UpdateAccountFeedTimes.
func (mr *MockIRepoMockRecorder) UpdateAccountFeedTimes(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountFeedTimes", reflect.TypeOf((*MockIRepo)(nil).UpdateAccountFeedTimes), arg0, arg1, arg2)
}

// Vacuum mocks base method.
func (m *MockIRepo) Vacuum() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Vacuum")
	ret0, _ := ret[0].(error)
	return ret0
}

// Vacuum indicates an expected call of Vacuum.
func (mr *MockIRepoMockRecorder) Vacuum() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vacuum", reflect.TypeOf((*MockIRepo)(nil).Vacuum))
}
