// Code generated by MockGen. DO NOT EDIT.
// Source: rss_parrot/logic (interfaces: IMessenger)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination ../test/mocks/mock_messenger.go -package mocks rss_parrot/logic IMessenger
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	logic "rss_parrot/logic"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockIMessenger is a mock of IMessenger interface.
type MockIMessenger struct {
	ctrl     *gomock.Controller
	recorder *MockIMessengerMockRecorder
}

// MockIMessengerMockRecorder is the mock recorder for MockIMessenger.
type MockIMessengerMockRecorder struct {
	mock *MockIMessenger
}

// NewMockIMessenger creates a new mock instance.
func NewMockIMessenger(ctrl *gomock.Controller) *MockIMessenger {
	mock := &MockIMessenger{ctrl: ctrl}
	mock.recorder = &MockIMessengerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMessenger) EXPECT() *MockIMessengerMockRecorder {
	return m.recorder
}

// EnqueueBroadcast mocks base method.
func (m *MockIMessenger) EnqueueBroadcast(arg0, arg1 string, arg2 time.Time, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnqueueBroadcast", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnqueueBroadcast indicates an expected call of EnqueueBroadcast.
func (mr *MockIMessengerMockRecorder) EnqueueBroadcast(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueBroadcast", reflect.TypeOf((*MockIMessenger)(nil).EnqueueBroadcast), arg0, arg1, arg2, arg3)
}

// SendMessageAsync mocks base method.
func (m *MockIMessenger) SendMessageAsync(arg0, arg1, arg2 string, arg3 []*logic.MsgMention, arg4, arg5 []string, arg6 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendMessageAsync", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// SendMessageAsync indicates an expected call of SendMessageAsync.
func (mr *MockIMessengerMockRecorder) SendMessageAsync(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageAsync", reflect.TypeOf((*MockIMessenger)(nil).SendMessageAsync), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}
