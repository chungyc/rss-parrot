// Code generated by MockGen. DO NOT EDIT.
// Source: rss_parrot/shared (interfaces: IUserAgent)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination ../test/mocks/mock_user_agent.go -package mocks rss_parrot/shared IUserAgent
//

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIUserAgent is a mock of IUserAgent interface.
type MockIUserAgent struct {
	ctrl     *gomock.Controller
	recorder *MockIUserAgentMockRecorder
}

// MockIUserAgentMockRecorder is the mock recorder for MockIUserAgent.
type MockIUserAgentMockRecorder struct {
	mock *MockIUserAgent
}

// NewMockIUserAgent creates a new mock instance.
func NewMockIUserAgent(ctrl *gomock.Controller) *MockIUserAgent {
	mock := &MockIUserAgent{ctrl: ctrl}
	mock.recorder = &MockIUserAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserAgent) EXPECT() *MockIUserAgentMockRecorder {
	return m.recorder
}

// AddUserAgent mocks base method.
func (m *MockIUserAgent) AddUserAgent(arg0 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUserAgent", arg0)
}

// AddUserAgent indicates an expected call of AddUserAgent.
func (mr *MockIUserAgentMockRecorder) AddUserAgent(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserAgent", reflect.TypeOf((*MockIUserAgent)(nil).AddUserAgent), arg0)
}
